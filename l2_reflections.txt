What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repo locally in a directory, it enables git functionality in that folder and also creates a hidden git index folder to store
	metadata.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	Staging area is an a bridge from working directory to repo. Its gives you a choice to select which files are going to be commited

How can you use the staging area to make sure you have one commit per logical change?

	git diff without arguements compares working directory and stagin area

	git diff --staged compares staging area to latest commit. It's used to check what is being committed

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	In situations where the files need to be experimented with , without affecting 
	the original versions. In these cases, branches are useful, as they allow you to use
	the latest code for experimentation

	git log --graph --oneline branch1 branch2 helps display changes between 2 branches and their history relative to each other

How do the diagrams help you visualize the branch structure?

	using diagrams, we can learn about the parents of each commits, and thus what changes can be reached via a branch. If a commit is unreachable

	it doesnt show up in git log. Things like these can be visualized using diagrams. If you checkout a past commit on a branch, and make a new commit

	it goes onto an unnamed branch which isnt saved unless you checkout using a new branch. So, if you go back to an existing branch without committing
	this change on a new branch, this commit will be lost unless you happen to know the commit ID.

git show shows the diff between a parent and its commit

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	by mergin branches, we get the best of both worlds and at the same time, we can see the commits relative to the time they were committed to
	make it easier to see why the changes were done. Interleaving might be a bit confusing, but the diagram shows that each commit from both 
	branches can still be accessed through master

git branch -d branch_name deletes a branch





